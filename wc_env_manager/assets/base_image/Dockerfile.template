# :Author: Jonathan Karr <karr@mssm.edu>
# :Date: 2018-08-28
# :Copyright: 2017-2018, Karr Lab
# :License: MIT

# base
FROM ubuntu

# Create user to run operations in containers
RUN groupadd -r -g 999 container_user \
    && useradd -m -r -u 999 -g container_user container_user

# update apt packages
RUN apt-get update -y

# set time zone
ARG timezone=America/New_York
RUN apt-get install -y --no-install-recommends tzdata \
    && ln -fs /usr/share/zoneinfo/$timezone /etc/localtime \
    && dpkg-reconfigure -f noninteractive tzdata

# install apt packages
RUN apt-get install -y --no-install-recommends \
    build-essential \
    ca-certificates \
    cmake \
    default-jre \
    enchant \
    expect \
    git \
    graphviz \
    gzip \
    locales \
    libbz2-dev \
    libcairo2-dev \
    libeigen3-dev \
    libffi6 \
    libffi-dev \
    libglpk-dev \
    libjpeg-dev \
    libmysqlclient-dev \
    libmysqld-dev \
    libsqlite3-dev \
    libssl-dev \
    libxml2-dev \
    mercurial \
    nano \
    openssl \
    pandoc \
    ssh \
    sudo \
    swig \
    tar \
    tk8.5-dev \
    wget \
    zip \
    zlib1g-dev

# set locale
RUN locale-gen en_US.UTF-8
ENV LC_ALL=en_US.UTF-8

# install Python
ARG python_version=3.6.5
ARG python_version_major_minor=3.6
ENV LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/lib
RUN apt-get install -y --no-install-recommends tk-dev \
    \
    && cd /tmp \
    && wget https://www.python.org/ftp/python/${python_version}/Python-${python_version}.tgz -O /tmp/Python-${python_version}.tgz \
    && tar xzf /tmp/Python-${python_version}.tgz \
    && cd /tmp/Python-${python_version} \
    && ./configure --prefix=/usr/local --enable-optimizations --enable-shared --enable-unicode=ucs4 \
    && make \
    # && make test \
    && make install \
    && ldconfig \
    && python${python_version_major_minor} -m ensurepip \
    && cd / \
    && rm -r /tmp/Python-${python_version}.tgz \
    && rm -r /tmp/Python-${python_version}

# install openbabel
ARG openbabel_version=2.4.1
RUN cd /tmp \
    && openbabel_version_dash=$(echo $openbabel_version | sed 's/\./-/g') \
    && wget https://github.com/openbabel/openbabel/archive/openbabel-${openbabel_version_dash}.tar.gz -O /tmp/openbabel-${openbabel_version}.tar.gz \
    && tar -xvvf /tmp/openbabel-${openbabel_version}.tar.gz \
    && cd openbabel-openbabel-${openbabel_version_dash} \
    && mkdir build \
    && cd build \
    && cmake .. \
    && make \
    # && make test \
    && make install \
    && ldconfig \
    && cd / \
    && rm -r /tmp/openbabel-${openbabel_version}.tar.gz \
    && rm -r /tmp/openbabel-openbabel-${openbabel_version_dash}

# install cplex
{% if cplex_license -%}
ARG cplex_version=12.8.0
ARG cplex_version_major_minor_nodot=128
COPY cplex_studio${cplex_version_major_minor_nodot}.linux-x86-64.bin /tmp/
COPY cplex.installer.properties /tmp/
RUN cd /tmp \
    && ./cplex_studio${cplex_version_major_minor_nodot}.linux-x86-64.bin -f /tmp/cplex.installer.properties \
    \
    && cd /opt/ibm/ILOG/CPLEX_Studio${cplex_version_major_minor_nodot}/cplex/python/3.6/x86-64_linux/ \
    && pip${python_version_major_minor} install . \
    \
    && rm /tmp/cplex_studio${cplex_version_major_minor_nodot}.linux-x86-64.bin \
    && rm /tmp/cplex.installer.properties
{%- endif %}

# install gurobi
{% if gurobi_license -%}
ARG gurobi_version=8.0.1
ARG gurobi_license={{ gurobi_license }}
COPY install_gurobi.exp /tmp/
RUN cd /tmp \
    && gurobi_version_major=$(echo $gurobi_version | cut -d "." -f 1,2) \
    && gurobi_version_nodot=$(echo $gurobi_version | sed 's/\.//g') \
    && wget http://packages.gurobi.com/${gurobi_version_major}/gurobi${gurobi_version}_linux64.tar.gz \
    && tar xvfz gurobi${gurobi_version}_linux64.tar.gz \
    && mv gurobi${gurobi_version_nodot} /opt/ \
    && /tmp/install_gurobi.exp "${gurobi_version_nodot}" "${gurobi_license}" \
    && cd /opt/gurobi${gurobi_version_nodot}/linux64 \
    && python${python_version_major_minor} setup.py install \
    && rm /tmp/gurobi${gurobi_version}_linux64.tar.gz \
    && rm /tmp/install_gurobi.exp
ARG gurobi_version_nodot=800
ENV GUROBI_HOME=/opt/gurobi${gurobi_version_nodot}/linux64 \
    PATH="${PATH}:${GUROBI_HOME}/bin" \
    LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${GUROBI_HOME}/lib"
{%- endif %}

# install mosek
{% if mosek_license -%}
ARG mosek_version=8.1.0.58
COPY {{ mosek_license }} /tmp/
RUN cd /tmp \
    && mosek_version_major=$(echo $mosek_version | cut -d "." -f 1,1) \
    && wget https://d2i6rjz61faulo.cloudfront.net/stable/${mosek_version}/mosektoolslinux64x86.tar.bz2 \
    && tar -xvvf mosektoolslinux64x86.tar.bz2 \
    && mv /tmp/mosek /opt/ \
    && mkdir ${HOME}/mosek \
    && mv /tmp/{{ mosek_license }} ${HOME}/mosek/ \
    && cd /opt/mosek/8/tools/platform/linux64x86/python/3/ \
    && python${python_version_major_minor} setup.py install \
    && rm /tmp/mosektoolslinux64x86.tar.bz2 \
    && rm ${HOME}/mosek/{{ mosek_license }}
ENV PATH="${PATH}:/opt/mosek/${mosek_version_major}/tools/platform/linux64x86/bin" \
    LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/opt/mosek/${mosek_version_major}/tools/platform/linux64x86/bin"
{%- endif %}

# install xpress
{% if xpress_license -%}
ARG xpress_version=8.5.3
ARG xpress_license_server={{ xpress_license_server }}
COPY {{ xpress_license }} /tmp/
COPY xpress.egg-info /tmp/
RUN cd /tmp \
    && wget https://clientarea.xpress.fico.com/downloads/${xpress_version}/xp${xpress_version}_linux_x86_64_setup.tar \
    && mkdir xp${xpress_version}_linux_x86_64_setup \
    && tar -xvvf xp${xpress_version}_linux_x86_64_setup.tar -C xp${xpress_version}_linux_x86_64_setup \
    && cd /tmp/xp${xpress_version}_linux_x86_64_setup \
    && ./install.sh -l floating-client -a /tmp/{{ xpress_license }} -d /opt/xpressmp -k yes -s ${xpress_license_server} \
    && echo "/opt/xpressmp/lib" | tee /usr/local/lib/python${python_version_major_minor}/site-packages/xpress.pth \
    && cp /tmp/xpress.egg-info /usr/local/lib/python${python_version_major_minor}/site-packages/xpress-${xpress_version}.egg-info \
    && cd /tmp \
    && rm /tmp/xp${xpress_version}_linux_x86_64_setup.tar \
    && rm -r /tmp/xp${xpress_version}_linux_x86_64_setup \
    && rm /tmp/{{ xpress_license }} \
    && rm /tmp/xpress.egg-info \
    && rm /opt/xpressmp/bin/{{ xpress_license }}
ENV XPRESSDIR=/opt/xpressmp \
    PATH=$PATH:$XPRESSDIR/bin \
    LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/lib/x86_64-linux-gnu:$XPRESSDIR/lib \
    CLASSPATH=$CLASSPATH:$XPRESSDIR/lib/xprs.jar:$XPRESSDIR/lib/xprb.jar:$XPRESSDIR/lib/xprm.jar \
    XPRESS=$XPRESSDIR/bin
{%- endif %}

# COIN-OR: CBC (latest version compatible with CyLP)
ARG cbc_version=2.8.5
RUN cd /tmp \
    && wget https://www.coin-or.org/download/source/Cbc/Cbc-${cbc_version}.tgz \
    && tar -xvvf Cbc-${cbc_version}.tgz \
    && cd Cbc-${cbc_version} \
    && mkdir build \
    && cd build \
    && mkdir -p /opt/coin-or/cbc \
    && ../configure -C --prefix=/opt/coin-or/cbc --enable-gnu-packages \
    && make \
    # && make test \
    && make install \
    && cd ../../ \
    && rm -r Cbc-${cbc_version} \
    && rm Cbc-${cbc_version}.tgz
ENV COIN_INSTALL_DIR=/opt/coin-or/cbc \
    PATH=${PATH}:/opt/coin-or/cbc/bin \
    LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/opt/coin-or/cbc/lib

# # COIN-OR: coinutils
# ARG coin_utils_version=2.10.14
# RUN cd /tmp \
#     && wget https://www.coin-or.org/download/source/CoinUtils/CoinUtils-${coin_utils_version}.tgz \
#     && tar -xvvf CoinUtils-${coin_utils_version}.tgz \
#     && cd CoinUtils-${coin_utils_version} \
#     && mkdir build \
#     && cd build \
#     && mkdir -p /opt/coin-or/coinutils \
#     && ../configure -C --prefix=/opt/coin-or/coinutils --enable-gnu-packages \
#     && make \
#     # && make test \
#     && make install \
#     && cd /tmp \
#     && rm -r CoinUtils-${coin_utils_version} \
#     && rm CoinUtils-${coin_utils_version}.tgz
# ENV PATH=${PATH}:/opt/coin-or/coinutils/bin \
#     LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/opt/coin-or/coinutils/lib
#
# # install qpOASES
# ARG qpoases_version=3.2.1
# RUN cd /tmp \
#     && wget https://www.coin-or.org/download/source/qpOASES/qpOASES-${qpoases_version}.tgz \
#     && tar -xvvf qpOASES-${qpoases_version}.tgz \
#     && cd qpOASES-${qpoases_version} \
#     && make \
#     # && make test \
#     && mkdir -p /opt/coin-or/qpoases/lib \
#     && cp bin/libqpOASES.* /opt/coin-or/qpoases/lib \
#     && cp -r include/ /opt/coin-or/qpoases \
#     && cd interfaces/python \
#     && pip${python_version_major_minor} install cython numpy \
#     && python${python_version_major_minor} setup.py install \
#     && cd /tmp \
#     && rm -r qpOASES-${qpoases_version} \
#     && rm qpOASES-${qpoases_version}.tgz
# ENV LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/opt/coin-or/qpoases/lib

# MINOS
{% if minos_license -%}
ARG minos_version=5.6
RUN cd /tmp \
    && apt-get install -y --no-install-recommends \
        csh \
        gfortran \
    && pip${python_version_major_minor} install numpy \
    && wget http://stanford.edu/~saunders/tmp/quadLP.zip \
    && unzip quadLP.zip \
    \
    && cd /tmp/quadLP/minos56 \
    && sed -i 's/FC        = gfortran/FC        = gfortran -fPIC/g' Makefile.defs \
    && make clean \
    && make \
    && cd /tmp/quadLP/minos56/test \
    && make minos \
    # && ./run minos t1diet \
    \
    && cd /tmp/quadLP/qminos56 \
    && sed -i 's/FC        = gfortran/FC        = gfortran -fPIC/g' Makefile.defs \
    && make clean \
    && make \
    && cd /tmp/quadLP/qminos56/test \
    && make minos \
    # && ./run minos t1diet \
    \
    && cd /tmp \
    && git clone https://github.com/SBRG/solvemepy.git \
    && cd solvemepy \
    && git checkout 72db1bac4ee8a479283f54eaf1644119967d4ac0 \
    && cp /tmp/quadLP/minos56/lib/libminos.a ./ \
    && cp /tmp/quadLP/qminos56/lib/libquadminos.a ./ \
    && pip${python_version_major_minor} install . \
    \
    && cd /tmp \
    && rm -r quadLP  \
    && rm quadLP.zip \
    && rm -r solvemepy
{%- endif %}

# SoPlex
{% if soplex_license -%}
ARG soplex_version=3.1.1
RUN cd /tmp \
    && wget http://soplex.zib.de/download/release/soplex-${soplex_version}.tgz \
    && tar -xvvf soplex-${soplex_version}.tgz \
    && cd soplex-${soplex_version} \
    && mkdir build \
    && cd build \
    && cmake .. \
    && make \
    # && make test \
    && make install \
    && cd /tmp \
    && rm -r soplex-${soplex_version}  \
    && rm soplex-${soplex_version}.tgz  \
    \
    && apt-get install -y --no-install-recommends \
        libgmp-dev \
    && pip${python_version_major_minor} install cython \
    && cd /tmp \
    && git clone https://github.com/SBRG/soplex_cython.git \
    && cd soplex_cython \
    && wget http://soplex.zib.de/download/release/soplex-${soplex_version}.tgz \
    && pip${python_version_major_minor} install . \
    && cd /tmp \
    && rm -r soplex_cython
{%- endif %}

# kallisto
ARG kallisto_version=0.44.0
RUN cd /tmp \
    && wget https://github.com/pachterlab/kallisto/releases/download/v${kallisto_version}/kallisto_linux-v${kallisto_version}.tar.gz \
    && tar -xvvf kallisto_linux-v${kallisto_version}.tar.gz \
    && cp kallisto_linux-v${kallisto_version}/kallisto /usr/local/bin \
    && rm -rf kallisto_linux-v${kallisto_version} \
    && rm -rf kallisto_linux-v${kallisto_version}.tar.gz

# Docker
# RUN apt-get update \
#     && apt-get install -y --no-install-recommends \
#         apt-transport-https \
#         ca-certificates \
#         curl \
#         software-properties-common \
#     && curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - \
#     && add-apt-repository \
#         "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
#         $(lsb_release -cs) \
#         stable" \
#     && apt-get update \
#     && apt-get install -y --no-install-recommends docker-ce

# CircleCI local build agent
# RUN curl -o /usr/local/bin/circleci https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci \
#     && chmod +x /usr/local/bin/circleci

# Install Python packages; pbr has to be installed first to workaround error in sphinxcontrib-spelling installation
COPY requirements.txt /tmp/
RUN pip${python_version_major_minor} install -U pip setuptools \
    && pip${python_version_major_minor} install -U \
        cython \
        ipython \
        mock \
        numpy \
        pbr \
        pypandoc \
        requests \
        six \
    && pip${python_version_major_minor} install -U git+https://github.com/jjhelmus/CyLP.git@py3#egg=cylp \
    && pip${python_version_major_minor} install -r /tmp/requirements.txt \
    && rm tmp/requirements.txt

# Install NCBI taxonomy database and ETE3 package
RUN pip${python_version_major_minor} install ete3 \
    && python${python_version_major_minor} -c "import ete3; ete3.NCBITaxa().get_descendant_taxa('Homo');"

# final command
CMD bash
